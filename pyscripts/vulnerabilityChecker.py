import json
import re

def identify_vulnerabilities(json_input):
    # List of critical paths that signify high-risk vulnerabilities
    critical_paths = [
        '/admin', '/admin/login', '/wp-admin', '/config', '/cms/admin',
        '/config.php', '/web.config', '/settings.py', '/database.yml', '/appsettings.json',
        '/backup.zip', '/old/', '/backup/', '/index.php~', '/login.old',
        '/api/v1/users', '/api/v1/admin', '/user/delete', '/admin/reset-password',
        '/debug', '/error', '/status', '/stacktrace',
        '/.git/', '/.svn/', '/CVS/',
        '/phpmyadmin', '/adminer', '/pgadmin', '/dbadmin',
        '/execute', '/run', '/cmd', '/shell',
        '/logs/error.log', '/access.log', '/dump.sql', '/data.json',
        '/upload', '/file-upload', '/admin/upload'
    ]

    # Regular expressions for identifying potential vulnerabilities
    sql_injection_patterns = [
        r"'.*--",
        r"union.*select",
        r"insert.*into",
        r"delete.*from",
        r"drop.*table"
    ]

    xss_patterns = [
        r"<script>",
        r"javascript:",
        r"onerror=",
        r"onload="
    ]

    vulnerabilities = []

    # Load the JSON input
    data = json.loads(json_input)

    # Analyzing each entry in the JSON data
    for entry in data:
        path = entry.get('path', '')
        status = entry.get('status')
        url = entry.get('url', '')
        response_body = entry.get('response_body', '')
        headers = entry.get('headers', {})

        # Check for critical paths
        if any(critical_path in path for critical_path in critical_paths):
            vulnerabilities.append({
                'vulnerability': 'Critical path exposed',
                'severity': 'High',
                'location': f'Critical Path: {path}',
                'url': url
            })

        # Check for status code vulnerabilities
        if status == 200 and any(critical_path in path for critical_path in critical_paths):
            vulnerabilities.append({
                'vulnerability': 'Sensitive information exposure on critical path',
                'severity': 'High',
                'location': f'Accessible Critical Path: {path}',
                'url': url
            })
        elif status == 403 and any(critical_path in path for critical_path in critical_paths):
            vulnerabilities.append({
                'vulnerability': 'Restricted critical path - potential misconfiguration',
                'severity': 'Medium',
                'location': f'Restricted Critical Path: {path}',
                'url': url
            })
        elif status == 500:
            vulnerabilities.append({
                'vulnerability': 'Server Misconfiguration or Error',
                'severity': 'Medium',
                'location': f'Path causing server error: {path}',
                'url': url
            })

        # Check for SQL Injection vulnerabilities
        for pattern in sql_injection_patterns:
            if re.search(pattern, response_body, re.IGNORECASE):
                vulnerabilities.append({
                    'vulnerability': 'Potential SQL Injection',
                    'severity': 'High',
                    'location': f'Path: {path}',
                    'url': url
                })
                break

        # Check for XSS vulnerabilities
        for pattern in xss_patterns:
            if re.search(pattern, response_body, re.IGNORECASE):
                vulnerabilities.append({
                    'vulnerability': 'Potential Cross-Site Scripting (XSS)',
                    'severity': 'High',
                    'location': f'Path: {path}',
                    'url': url
                })
                break

        # Check for sensitive information in headers
        sensitive_headers = ['Server', 'X-Powered-By', 'X-AspNet-Version']
        for header in sensitive_headers:
            if header.lower() in [h.lower() for h in headers]:
                vulnerabilities.append({
                    'vulnerability': 'Sensitive Information Disclosure in Headers',
                    'severity': 'Low',
                    'location': f'Header: {header}',
                    'url': url
                })

        # Check for missing security headers
        security_headers = ['X-Frame-Options', 'X-XSS-Protection', 'Content-Security-Policy']
        for header in security_headers:
            if header.lower() not in [h.lower() for h in headers]:
                vulnerabilities.append({
                    'vulnerability': f'Missing Security Header: {header}',
                    'severity': 'Low',
                    'location': 'HTTP Headers',
                    'url': url
                })

        # Check for potential directory traversal
        if '..' in path:
            vulnerabilities.append({
                'vulnerability': 'Potential Directory Traversal',
                'severity': 'High',
                'location': f'Path: {path}',
                'url': url
            })

        # Check for potential remote file inclusion
        if re.search(r'(https?:)?//\S+\.\S+', path, re.IGNORECASE):
            vulnerabilities.append({
                'vulnerability': 'Potential Remote File Inclusion',
                'severity': 'High',
                'location': f'Path: {path}',
                'url': url
            })

    return vulnerabilities

# Sample JSON input
json_input = '''
[
  {
    "path": "/admin",
    "status": 200,
    "size": 54321,
    "words": 234,
    "lines": 12,
    "duration": "0.234s",
    "url": "http://example.com/admin"
  },
  {
    "path": "/login.php?user=admin'--",
    "status": 500,
    "size": 67890,
    "words": 456,
    "lines": 20,
    "duration": "0.456s",
    "url": "http://example.com/login.php?user=admin'--"
  },
  {
    "path": "/search?q=<script>alert('XSS')</script>",
    "status": 200,
    "size": 5678,
    "words": 123,
    "lines": 5,
    "duration": "0.234s",
    "url": "http://example.com/search?q=<script>alert('XSS')</script>"
  },
  {
    "path": "/config",
    "status": 403,
    "size": 1234,
    "words": 10,
    "lines": 2,
    "duration": "0.345s",
    "url": "http://example.com/config"
  },
  {
    "path": "/../../etc/passwd",
    "status": 403,
    "size": 1234,
    "words": 10,
    "lines": 2,
    "duration": "0.345s",
    "url": "http://example.com/../../etc/passwd"
  }
]
'''

# Identifying vulnerabilities
vulnerabilities_found = identify_vulnerabilities(json_input)

# Convert vulnerabilities to JSON format
vulnerabilities_json = json.dumps(vulnerabilities_found, indent=2)

# Print the JSON output
print(vulnerabilities_json)
