import React, { useState, useEffect } from 'react';
import { motion, stagger, useAnimate } from 'framer-motion';

const vulnerabilities = [
  { id: 1, fuzzResult: 'Buffer Overflow', vulnerability: 'Memory Corruption', severity: 'critical' },
  { id: 2, fuzzResult: 'SQL Injection', vulnerability: 'Input Validation', severity: 'high' },
  { id: 3, fuzzResult: 'Cross-Site Scripting', vulnerability: 'XSS', severity: 'medium' },
  { id: 4, fuzzResult: 'Path Traversal', vulnerability: 'File System Access', severity: 'low' },
  { id: 5, fuzzResult: 'Remote Code Execution', vulnerability: 'Command Injection', severity: 'critical' },
];

const getResolution = (vulnerability) => {
  switch (vulnerability) {
    case 'Memory Corruption':
      return 'Implement proper bounds checking to prevent buffer overflows, which lead to memory corruption. Use modern memory-safe languages, or enforce memory management techniques such as stack canaries and Address Space Layout Randomization (ASLR). Always test with fuzzing and static analysis tools.';
    case 'Input Validation':
      return 'Ensure all user inputs undergo rigorous sanitization and validation, particularly in fields prone to SQL injection. Input validation should block or neutralize harmful characters and prevent the execution of untrusted data in your queries.';
    case 'XSS':
      return 'Cross-site scripting attacks can be mitigated by implementing output encoding practices, utilizing secure headers such as Content Security Policy (CSP), and by validating and encoding all input that might be rendered back to users in any form.';
    case 'File System Access':
      return 'Prevent path traversal vulnerabilities by sanitizing and validating file paths thoroughly. It is recommended to use whitelisting for directories and ensure the application has the least privilege necessary to interact with the file system.';
    case 'Command Injection':
      return 'Mitigate command injection vulnerabilities by avoiding direct shell execution. Always use parameterized queries or prepared statements when interacting with system commands, and avoid executing user-controlled input in shell environments.';
    default:
      return 'No specific resolution available for this vulnerability. Conduct a comprehensive security review, leveraging both manual inspection and automated tools to ensure full coverage of potential weaknesses.';
  }
};

const TextGenerateEffect = ({ words, duration = 0.1 }) => {
  const [scope, animate] = useAnimate();
  const wordsArray = words.split(' ');

  useEffect(() => {
    animate(
      'span',
      { opacity: 1 },
      { duration: duration, delay: stagger(0.2) }
    );
  }, [scope.current]);

  return (
    <motion.div ref={scope}>
      {wordsArray.map((word, idx) => (
        <motion.span
          key={word + idx}
          className="dark:text-white text-black opacity-0"
        >
          {word}{' '}
        </motion.span>
      ))}
    </motion.div>
  );
};

const VulnerabilityResolution = () => {
  const [selectedVulnerability, setSelectedVulnerability] = useState('');
  const [resolution, setResolution] = useState('');
  const [loading, setLoading] = useState(false);

  const handleVulnerabilityChange = (e) => {
    setSelectedVulnerability(e.target.value);
    setResolution('');
  };

  const handleGetResolution = () => {
    if (selectedVulnerability) {
      setLoading(true);
      setTimeout(() => {
        setResolution(getResolution(selectedVulnerability));
        setLoading(false);
      }, 2000); // Simulate a 2-second delay for "generating" the resolution
    }
  };

  return (
    <div className="overflow-x-auto bg-gray-800 text-gray-200 p-4 rounded-lg shadow-lg ml-10">
      <div className="mb-4">
        <select
          value={selectedVulnerability}
          onChange={handleVulnerabilityChange}
          className="bg-gray-700 text-white p-2 rounded-md w-full"
        >
          <option value="">Select a vulnerability</option>
          {vulnerabilities.map((vuln) => (
            <option key={vuln.id} value={vuln.vulnerability}>
              {vuln.vulnerability} ({vuln.fuzzResult}) - {vuln.severity}
            </option>
          ))}
        </select>
      </div>
      <button
        onClick={handleGetResolution}
        className="bg-[#4f46e5] text-white px-4 py-2 rounded-md hover:bg-[#4338ca] transition-colors relative overflow-hidden"
      >
        {loading ? (
          <div className="w-5 h-5 border-4 border-t-transparent border-white rounded-full animate-spin"></div>
        ) : (
          'Get Resolution'
        )}
      </button>
      {loading ? (
        <div className="mt-4 text-gray-400">Generating resolution...</div>
      ) : resolution ? (
        <div className="mt-4 p-3 bg-[#4f46e5] text-white rounded-md">
          <h3 className="font-bold mb-2">Resolution:</h3>
          <TextGenerateEffect words={resolution} />
        </div>
      ) : null}
    </div>
  );
};

export default VulnerabilityResolution;
